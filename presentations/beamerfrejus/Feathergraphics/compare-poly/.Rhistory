# score[which(is.na(score))] <- 0
score[(floor(p/2)+1)] <- 1
return(score)
}
for(h in 1:(nmax/10)){
data <- Y[1:(10*h)]
#Adaptation
#model selec
M <- mselec(data, lambda)
test <- projinv(data, M, lambda)
# Shrinkage
shrin <- shrink(data,lambda)
plugin <- projinv(data, (10*h), lambda)
postmean <- plugin * shrin
for(i in 1 : length(postmean)){
if(Mod(postmean[i]) > 1){
postmean[i] <- postmean[i]/Mod(postmean[i])
}
}
name = paste(h,'.png',sep='')
png(name, width = 1800, height = 1800)
par(mfrow=c(1,2))
plot.function.circular(function(x) (u0(x, test)), xlim=c(-1, 1), lwd = 5,
main = "Estimate model selection", col = "red", shrink = 2)
ticks.circular(X[1:(10*h)], tcl = 0.05)
curve.circular(u0(x, theta0), add = T, col = "blue", lwd = 5)
plot.function.circular(function(x) (u0(x, postmean)), xlim=c(-1, 1),lwd = 5,
main = "Estimate shrinkage", col = "red", shrink = 2)
ticks.circular(X[1:(10*h)], tcl = 0.05)
curve.circular(u0(x, theta0), add = T,lwd = 5, col = "blue")
dev.off()
}
for(h in 1:(nmax/10)){
data <- Y[1:(10*h)]
#Adaptation
#model selec
M <- mselec(data, lambda)
test <- projinv(data, M, lambda)
# Shrinkage
shrin <- shrink(data,lambda)
plugin <- projinv(data, (10*h), lambda)
postmean <- plugin * shrin
for(i in 1 : length(postmean)){
if(Mod(postmean[i]) > 1){
postmean[i] <- postmean[i]/Mod(postmean[i])
}
}
name = paste(h,'.png',sep='')
png(name, width = 1800, height = 1800)
par(mfrow=c(1,2))
plot.function.circular(function(x) (u0(x, test)), xlim=c(-1, 1), lwd = 5,
main = "Estimate model selection", col = "red", shrink = 2)
ticks.circular(X[1:(10*h)], tcl = 0.05)
curve.circular(u0(x, theta0), add = T, col = "blue", lwd = 5)
plot.function.circular(function(x) (u0(x, postmean)), xlim=c(-1, 1),lwd = 5,
main = "Estimate shrinkage", col = "red", shrink = 2)
ticks.circular(X[1:(10*h)], tcl = 0.05)
curve.circular(u0(x, theta0), add = T,lwd = 5, col = "blue")
dev.off()
}
shrink <- function(Y, lambda){
n <- length(Y)
p <- length(lambda)
est <- projinv(Y, n, lambda)
Phi <- max(Mod(lambda[(floor(p/2)+1-n):(floor(p/2)+1+n)])^(-2))
psi <- log(max(Phi, n))^(2)/(log(n)^(2))
score <- matrix(ncol = 1, nrow = p, 0)
for( i in 1:n){
phi <- max(Mod(lambda[(floor(p/2)+1-i):(floor(p/2)+1+i)])^(-2))
score[(floor(p/2)+1)-i] <- sum(Mod(est[(floor(p/2)+1-i):(floor(p/2)+1+i)])^(2)) - (1/n)*10*i*phi
score[(floor(p/2)+1)+i] <- sum(Mod(est[(floor(p/2)+1-i):(floor(p/2)+1+i)])^(2)) - (1/n)*10*i*phi
}
s <- exp((n/2)*score-((n/2)*max(score)))
score <- s/sum(s)
score[(floor(p/2)+2):(p)] <- 1 - cumsum(2*score[(floor(p/2)+2):(p)])
score[floor(p/2):1] <- score[(floor(p/2)+2):(p)]
# score[which(is.na(score))] <- 0
score[(floor(p/2)+1)] <- 1
return(score)
}
for(h in 1:(nmax/10)){
data <- Y[1:(10*h)]
#Adaptation
#model selec
M <- mselec(data, lambda)
test <- projinv(data, M, lambda)
# Shrinkage
shrin <- shrink(data,lambda)
plugin <- projinv(data, (10*h), lambda)
postmean <- plugin * shrin
for(i in 1 : length(postmean)){
if(Mod(postmean[i]) > 1){
postmean[i] <- postmean[i]/Mod(postmean[i])
}
}
name = paste(h,'.png',sep='')
png(name, width = 1800, height = 1800)
par(mfrow=c(1,2))
plot.function.circular(function(x) (u0(x, test)), xlim=c(-1, 1), lwd = 5,
main = "Estimate model selection", col = "red", shrink = 2)
ticks.circular(X[1:(10*h)], tcl = 0.05)
curve.circular(u0(x, theta0), add = T, col = "blue", lwd = 5)
plot.function.circular(function(x) (u0(x, postmean)), xlim=c(-1, 1),lwd = 5,
main = "Estimate shrinkage", col = "red", shrink = 2)
ticks.circular(X[1:(10*h)], tcl = 0.05)
curve.circular(u0(x, theta0), add = T,lwd = 5, col = "blue")
dev.off()
}
shrink <- function(Y, lambda){
n <- length(Y)
p <- length(lambda)
est <- projinv(Y, n, lambda)
Phi <- max(Mod(lambda[(floor(p/2)+1-n):(floor(p/2)+1+n)])^(-2))
psi <- log(max(Phi, n))^(2)/(log(n)^(2))
score <- matrix(ncol = 1, nrow = p, 0)
for( i in 1:n){
phi <- max(Mod(lambda[(floor(p/2)+1-i):(floor(p/2)+1+i)])^(-2))
score[(floor(p/2)+1)-i] <- sum(Mod(est[(floor(p/2)+1-i):(floor(p/2)+1+i)])^(2)) - (1/n)*5*i*phi
score[(floor(p/2)+1)+i] <- sum(Mod(est[(floor(p/2)+1-i):(floor(p/2)+1+i)])^(2)) - (1/n)*5*i*phi
}
s <- exp((n/2)*score-((n/2)*max(score)))
score <- s/sum(s)
score[(floor(p/2)+2):(p)] <- 1 - cumsum(2*score[(floor(p/2)+2):(p)])
score[floor(p/2):1] <- score[(floor(p/2)+2):(p)]
# score[which(is.na(score))] <- 0
score[(floor(p/2)+1)] <- 1
return(score)
}
for(h in 1:(nmax/10)){
data <- Y[1:(10*h)]
#Adaptation
#model selec
M <- mselec(data, lambda)
test <- projinv(data, M, lambda)
# Shrinkage
shrin <- shrink(data,lambda)
plugin <- projinv(data, (10*h), lambda)
postmean <- plugin * shrin
for(i in 1 : length(postmean)){
if(Mod(postmean[i]) > 1){
postmean[i] <- postmean[i]/Mod(postmean[i])
}
}
name = paste(h,'.png',sep='')
png(name, width = 1800, height = 1800)
par(mfrow=c(1,2))
plot.function.circular(function(x) (u0(x, test)), xlim=c(-1, 1), lwd = 5,
main = "Estimate model selection", col = "red", shrink = 2)
ticks.circular(X[1:(10*h)], tcl = 0.05)
curve.circular(u0(x, theta0), add = T, col = "blue", lwd = 5)
plot.function.circular(function(x) (u0(x, postmean)), xlim=c(-1, 1),lwd = 5,
main = "Estimate shrinkage", col = "red", shrink = 2)
ticks.circular(X[1:(10*h)], tcl = 0.05)
curve.circular(u0(x, theta0), add = T,lwd = 5, col = "blue")
dev.off()
}
nrep <- 1000
EQMf <- matrix(ncol = (nmax/100), nrow = nrep, 0)
EQMb <- matrix(ncol = (nmax/100), nrow = nrep, 0)
for(h in 1:(nmax/100)){
for(i in 1:nrep){
sub <- sample(1:length(Y), size = (h*10), replace = T)
data <- Y[sub]
#Adaptation
#model selec
M <- mselec(data, lambda)
test <- projinv(data, M, lambda)
EQMf[i,h] <- sum(Mod(test - theta0)^(2))
# Shrinkage
shrin <- shrink(data,lambda)
plugin <- projinv(data, length(data), lambda)
postmean <- plugin * shrin
EQMb[i,h] <- sum(Mod(postmean - theta0)^(2))
}
}
EQMf
nrep <- 100
EQMf <- matrix(ncol = (nmax/100), nrow = nrep, 0)
EQMb <- matrix(ncol = (nmax/100), nrow = nrep, 0)
for(h in 1:(nmax/100)){
for(i in 1:nrep){
sub <- sample(1:length(Y), size = (h*10), replace = T)
data <- Y[sub]
#Adaptation
#model selec
M <- mselec(data, lambda)
test <- projinv(data, M, lambda)
EQMf[i,h] <- sum(Mod(test - theta0)^(2))
# Shrinkage
shrin <- shrink(data,lambda)
plugin <- projinv(data, length(data), lambda)
postmean <- plugin * shrin
EQMb[i,h] <- sum(Mod(postmean - theta0)^(2))
}
}
h
for(h in 15:(nmax/100)){
for(i in 1:nrep){
sub <- sample(1:length(Y), size = (h*10), replace = T)
data <- Y[sub]
#Adaptation
#model selec
M <- mselec(data, lambda)
test <- projinv(data, M, lambda)
EQMf[i,h] <- sum(Mod(test - theta0)^(2))
# Shrinkage
shrin <- shrink(data,lambda)
plugin <- projinv(data, length(data), lambda)
postmean <- plugin * shrin
EQMb[i,h] <- sum(Mod(postmean - theta0)^(2))
}
}
EQMf
empf <- matrix(ncol=(nmax/100),nrow=2)
empf[1,] <- (1:(nmax/100))*10
empf[2,] <- apply(EQMf, 2, mean)
empb <- matrix(ncol=(nmax/100),nrow=2)
empb[1,] <- (1:(nmax/100))*10
empb[2,] <- apply(EQMb, 2, mean)
rang <- c(min(min(range(empf[2,1:81])),min(range(empb[2,1:81]))),max(max(range(empf[2,1:81])),max(range(empb[2,1:81]))))
plot(x=empf[1,(1:81)], y = empf[2,(1:81)], type = "l",
xlab ="sample size", ylab ="",
main = "Empirical mean squared error", col = "red")
plot(x=empb[1,(1:81)], y = empb[2,(1:81)], type = "l", col ="blue")
plot(x=empf[1,(1:81)], y = empf[2,(1:81)], type = "l",
xlab ="sample size", ylab ="",
main = "Empirical mean squared error", col = "red")
lines(x=empb[1,(1:81)], y = empb[2,(1:81)], type = "l", col ="blue")
legend(x = "topright",
c("Model selection", "Bayes posterior mean"),
lty = c(1,1),
col = c("red", "blue"))
biais <- matrix(nrow = 1, ncol = length(Y))
variance <- matrix(nrow = 1, ncol = length(Y))
erreur <- matrix(nrow = 1, ncol = 10000)
milieu <- floor(length(theta)/2)+1
data <- Y
theta <- thetapoly
la <- lammildly
f <- theta*la
for(i in 1 : length(biais)){
biais[i] <- sum(Mod(theta[c(1:(milieu-(i+1)),(milieu+i+1):length(theta))])^2)
variance[i] <- sum((1-Mod(f[c((milieu-i):(milieu+i))])^(2))/(length(data)*Mod(la[c((milieu-i):(milieu+i))])^(2)))
}
erreur <- biais + variance
plot(biais[1:20], type = "l", xlab= "", ylab ="",
main = "squared bias, variance and MSE")
lines(variance[1:20], type = "l")
la
la <- lamdirect
f <- theta*la
for(i in 1 : length(biais)){
biais[i] <- sum(Mod(theta[c(1:(milieu-(i+1)),(milieu+i+1):length(theta))])^2)
variance[i] <- sum((1-Mod(f[c((milieu-i):(milieu+i))])^(2))/(length(data)*Mod(la[c((milieu-i):(milieu+i))])^(2)))
}
erreur <- biais + variance
plot(biais[1:20], type = "l", xlab= "", ylab ="",
main = "squared bias, variance and MSE")
lines(variance[1:20], type = "l")
plot(biais, type = "l", xlab= "", ylab ="",
main = "squared bias, variance and MSE")
lines(variance, type = "l")
variance[1:20]
plot(biais[1:20], type = "l", xlab= "", ylab ="",
main = "squared bias, variance and MSE")
plot(biais[1:100], type = "l", xlab= "", ylab ="",
main = "squared bias, variance and MSE")
lines(variance[1:20], type = "l")
plot(biais[1:100], type = "l", xlab= "", ylab ="",
main = "squared bias, variance and MSE")
lines(variance[1:100], type = "l")
plot(biais[1:200], type = "l", xlab= "", ylab ="",
main = "squared bias, variance and MSE")
lines(variance[1:100], type = "l")
plot(biais[1:200], type = "l", xlab= "", ylab ="",
main = "squared bias, variance and MSE")
lines(variance[1:200], type = "l")
lines(erreur[1:200], type = "l")
la <- lammildly
f <- theta*la
for(i in 1 : length(biais)){
biais[i] <- sum(Mod(theta[c(1:(milieu-(i+1)),(milieu+i+1):length(theta))])^2)
variance[i] <- sum((1-Mod(f[c((milieu-i):(milieu+i))])^(2))/(length(data)*Mod(la[c((milieu-i):(milieu+i))])^(2)))
}
erreur <- biais + variance
plot(biais[1:200], type = "l", xlab= "", ylab ="",
main = "squared bias, variance and MSE")
lines(variance[1:200], type = "l")
plot(biais[1:50], type = "l", xlab= "", ylab ="",
main = "squared bias, variance and MSE")
lines(variance[1:50], type = "l")
lines(erreur[1:50], type = "l")
nrep <- 100
lambda
shrin <- shrink(Y,lambda)
mean <- projinv(Y, length(Y), lambda)
nrep <- 100
shrin <- shrink(Y[1:1000],lambda)
mean <- projinv(Y[1:1000], length(Y[1:1000]), lambda)
vari <- 1/(1+length(Y[1:1000])*Mod(lambda[(length(Y[1:1000])+2):length(lambda)])^2)
tirage <- matrix(nrow=nrep, ncol = (2*length(Y[1:1000])+1), 0)
tirage[,(length(Y[1:1000])+1)] <- 1
u1 <- runif(nrep)
for(i in 1 : nrep){
M <- which.min(u1[i]<shrin[(length(Y[1:1000])+2):(length(shrin))])-1
#  alea <- rtruncgauss(M,mean[(length(Y)+2):(length(Y)+1+M)],vari[1:M])
alea <- rnorm(M, mean = Re(mean[(length(Y[1:1000])+2):(length(Y[1:1000])+1+M)]), sqrt(vari[1:M])/2)
aleai <- 1i*rnorm(M, mean = Im(mean[(length(Y[1:1000])+2):(length(Y[1:1000])+1+M)]), sd=sqrt(vari[1:M])/2)
tirage[i,((length(Y[1:1000])+2):(length(Y[1:1000])+1+M))] <- c(alea+aleai)
tirage[i,((length(Y[1:1000])-M+1):length(Y[1:1000]))] <- Re(tirage[i,((length(Y[1:1000])+1+M):(length(Y[1:1000])+2))])-1i*Im(tirage[i,((length(Y[1:1000])+1+M):(length(Y[1:1000])+2))])
}
M <- which.min(u1[i]<shrin[(length(Y[1:1000])+2):(length(shrin))])-1
alea <- rnorm(M, mean = Re(mean[(length(Y[1:1000])+2):(length(Y[1:1000])+1+M)]), sqrt(vari[1:M])/2)
aleai <- 1i*rnorm(M, mean = Im(mean[(length(Y[1:1000])+2):(length(Y[1:1000])+1+M)]), sd=sqrt(vari[1:M])/2)
tirage[i,((length(Y[1:1000])+2):(length(Y[1:1000])+1+M))] <- c(alea+aleai)
tirage
c(alea+aleai)
aleai
mean
mean <- projinv(Y[1:1000], length(Y[1:1000]), lambda)
mean
alea <- rnorm(M, mean = Re(mean[(length(Y[1:1000])+2):(length(Y[1:1000])+1+M)]), sqrt(vari[1:M])/2)
alea
M
shrin
shrin <- shrink(Y[1:1000],lambda)
shrin
u1[i]
<shrin[(length(Y[1:1000])+2):(length(shrin))]
shrin[(length(Y[1:1000])+2):(length(shrin))]
shrin
M <- which.min(u1[i]<shrin[(length(Y)+2):(length(shrin))])-1
alea <- rnorm(M, mean = Re(mean[(length(Y[1:1000])+2):(length(Y[1:1000])+1+M)]), sqrt(vari[1:M])/2)
aleai <- 1i*rnorm(M, mean = Im(mean[(length(Y[1:1000])+2):(length(Y[1:1000])+1+M)]), sd=sqrt(vari[1:M])/2)
tirage[i,((length(Y[1:1000])+2):(length(Y[1:1000])+1+M))] <- c(alea+aleai)
tirage[i,((length(Y[1:1000])-M+1):length(Y[1:1000]))] <- Re(tirage[i,((length(Y[1:1000])+1+M):(length(Y[1:1000])+2))])-1i*Im(tirage[i,((length(Y[1:1000])+1+M):(length(Y[1:1000])+2))])
for(i in 1 : nrep){
M <- which.min(u1[i]<shrin[(length(Y)+2):(length(shrin))])-1
#  alea <- rtruncgauss(M,mean[(length(Y)+2):(length(Y)+1+M)],vari[1:M])
alea <- rnorm(M, mean = Re(mean[(length(Y[1:1000])+2):(length(Y[1:1000])+1+M)]), sqrt(vari[1:M])/2)
aleai <- 1i*rnorm(M, mean = Im(mean[(length(Y[1:1000])+2):(length(Y[1:1000])+1+M)]), sd=sqrt(vari[1:M])/2)
tirage[i,((length(Y[1:1000])+2):(length(Y[1:1000])+1+M))] <- c(alea+aleai)
tirage[i,((length(Y[1:1000])-M+1):length(Y[1:1000]))] <- Re(tirage[i,((length(Y[1:1000])+1+M):(length(Y[1:1000])+2))])-1i*Im(tirage[i,((length(Y[1:1000])+1+M):(length(Y[1:1000])+2))])
}
posmean <- apply(tirage, 2, mean)
plot.function.circular(function(x) (u0(x, theta0)), lwd = 5,
xlim=c(-1.5, 1.5), ylim = c(-1.5,1.5), col="blue")
ticks.circular(X, tcl = 0.05, col = "blue")
for(i in 1 : nrep){
curve.circular(u0(x, tirage[i,]), col=alpha("grey", 0.2), add = T)
}
lambda
nrep <- 100
shrin <- shrink(Y[1:1000],lambda)
shrin
shrink <- function(Y, lambda){
n <- length(Y)
p <- length(lambda)
est <- projinv(Y, n, lambda)
Phi <- max(Mod(lambda[(floor(p/2)+1-n):(floor(p/2)+1+n)])^(-2))
psi <- log(max(Phi, n))^(2)/(log(n)^(2))
score <- matrix(ncol = 1, nrow = p, 0)
for( i in 1:n){
phi <- max(Mod(lambda[(floor(p/2)+1-i):(floor(p/2)+1+i)])^(-2))
score[(floor(p/2)+1)-i] <- sum(Mod(est[(floor(p/2)+1-i):(floor(p/2)+1+i)])^(2)) - (1/n)*5*i*phi
score[(floor(p/2)+1)+i] <- sum(Mod(est[(floor(p/2)+1-i):(floor(p/2)+1+i)])^(2)) - (1/n)*5*i*phi
}
s <- exp((n/2)*score-((n/2)*max(score)))
score <- s/sum(s)
score[(floor(p/2)+2):(p)] <- 1 - cumsum(2*score[(floor(p/2)+2):(p)])
score[floor(p/2):1] <- score[(floor(p/2)+2):(p)]
# score[which(is.na(score))] <- 0
score[(floor(p/2)+1)] <- 1
return(score)
}
shrin <- shrink(Y[1:1000],lambda)
shrin
shrin[(floor(length(shrin)/2)+1):(floor(length(shrin)/2)+1+length(Y))]
for(i in 1 : nrep){
M <- which.min(u1[i]<shrin[(length(Y)+1):(length(shrin))])-1
#  alea <- rtruncgauss(M,mean[(length(Y)+2):(length(Y)+1+M)],vari[1:M])
alea <- rnorm(M, mean = Re(mean[(length(Y[1:1000])+2):(length(Y[1:1000])+1+M)]), sqrt(vari[1:M])/2)
aleai <- 1i*rnorm(M, mean = Im(mean[(length(Y[1:1000])+2):(length(Y[1:1000])+1+M)]), sd=sqrt(vari[1:M])/2)
tirage[i,((length(Y[1:1000])+2):(length(Y[1:1000])+1+M))] <- c(alea+aleai)
tirage[i,((length(Y[1:1000])-M+1):length(Y[1:1000]))] <- Re(tirage[i,((length(Y[1:1000])+1+M):(length(Y[1:1000])+2))])-1i*Im(tirage[i,((length(Y[1:1000])+1+M):(length(Y[1:1000])+2))])
}
posmean <- apply(tirage, 2, mean)
plot.function.circular(function(x) (u0(x, theta0)), lwd = 5,
xlim=c(-1.5, 1.5), ylim = c(-1.5,1.5), col="blue")
ticks.circular(X, tcl = 0.05, col = "blue")
for(i in 1 : nrep){
curve.circular(u0(x, tirage[i,]), col=alpha("grey", 0.2), add = T)
}
for(i in 1 : nrep){
M <- which.min(u1[i]<shrin[(length(Y)+1):(length(shrin))])-1
#  alea <- rtruncgauss(M,mean[(length(Y)+2):(length(Y)+1+M)],vari[1:M])
alea <- rnorm(M, mean = Re(mean[(length(Y)+2):(length(Y)+1+M)]), sqrt(vari[1:M])/2)
aleai <- 1i*rnorm(M, mean = Im(mean[(length(Y)+2):(length(Y)+1+M)]), sd=sqrt(vari[1:M])/2)
tirage[i,((length(Y[1:1000])+2):(length(Y[1:1000])+1+M))] <- c(alea+aleai)
tirage[i,((length(Y[1:1000])-M+1):length(Y[1:1000]))] <- Re(tirage[i,((length(Y[1:1000])+1+M):(length(Y[1:1000])+2))])-1i*Im(tirage[i,((length(Y[1:1000])+1+M):(length(Y[1:1000])+2))])
}
posmean <- apply(tirage, 2, mean)
plot.function.circular(function(x) (u0(x, theta0)), lwd = 5,
xlim=c(-1.5, 1.5), ylim = c(-1.5,1.5), col="blue")
ticks.circular(X, tcl = 0.05, col = "blue")
for(i in 1 : nrep){
curve.circular(u0(x, tirage[i,]), col=alpha("grey", 0.2), add = T)
}
curve.circular(u0(x, posmean), col=alpha("red", 0.2), add = T, lwd=5)
plot.function.circular(function(x) (u0(x, theta0)), lwd = 5,
xlim=c(-1.5, 1.5), ylim = c(-1.5,1.5), col="blue")
ticks.circular(X, tcl = 0.05, col = "blue")
for(i in 1 : nrep){
curve.circular(u0(x, tirage[i,]), col=alpha("grey", 0.2), add = T)
}
curve.circular(u0(x, posmean), col="red", add = T)
setwd("~/Desktop/Recherche/Deconvolution/Beamer-Helsinki/Feathergraphics/distM")
for(h in 1:(nmax/100)){
data <- Y[1:(10*h)]
shrin <- shrink(data,lambda)
name = paste(h,'.png',sep='')
png(name, width = 1800, height = 1800)
plot(shrin[(length(Y)+1):(length(Y)+12)], type="l", col="green", xlab="m", ylab = "IP(M > m-1|Y)")
dev.off()
}
for(h in 1:(nmax/100)){
data <- Y[1:(10*h)]
shrin <- shrink(data,lambda)
name = paste(h,'.png',sep='')
png(name, width = 1800, height = 1800)
plot(shrin[(length(Y)+1):(length(Y)+12)], type="l", xlab="m", ylab = "IP(M > m-1|Y)")
dev.off()
}
lambda <- lammildly
repLambda <- repLambdaPoly
epsilon <- epsilonPoly
Y <- X + epsilon
fY <- theta0*lambda
setwd("~/Desktop/Recherche/Deconvolution/Beamer-Helsinki/Feathergraphics/compare-poly")
for(h in 1:(nmax/10)){
data <- Y[1:(10*h)]
#Adaptation
#model selec
M <- mselec(data, lambda)
test <- projinv(data, M, lambda)
# Shrinkage
shrin <- shrink(data,lambda)
plugin <- projinv(data, (10*h), lambda)
postmean <- plugin * shrin
for(i in 1 : length(postmean)){
if(Mod(postmean[i]) > 1){
postmean[i] <- postmean[i]/Mod(postmean[i])
}
}
name = paste(h,'.png',sep='')
png(name, width = 1800, height = 1800)
par(mfrow=c(1,2))
plot.function.circular(function(x) (u0(x, test)), xlim=c(-1, 1), lwd = 5,
main = "Estimate model selection", col = "red", shrink = 2)
ticks.circular(X[1:(10*h)], tcl = 0.05)
curve.circular(u0(x, theta0), add = T, col = "blue", lwd = 5)
plot.function.circular(function(x) (u0(x, postmean)), xlim=c(-1, 1),lwd = 5,
main = "Estimate shrinkage", col = "red", shrink = 2)
ticks.circular(X[1:(10*h)], tcl = 0.05)
curve.circular(u0(x, theta0), add = T,lwd = 5, col = "blue")
dev.off()
}
theta0 <- thetapoly
repTheta <- repThetaPoly
X <- Xpoly
par(mfrow=c(2,2))
plot.function.circular(function(x) (u0(x, theta0)/2),
xlim=c(-1.5, 1.5), ylim = c(-1.5,1.5),
main = "direct case", col="blue")
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
plot.function.circular(function(x) (u0(x, theta0)/2),
xlim=c(-1.5, 1.5), ylim = c(-1.5,1.5),
main = "direct case", col="blue")
ticks.circular(X, tcl = 0.05, col = "blue")
for(h in 1:(nmax/10)){
data <- Y[1:(10*h)]
#Adaptation
#model selec
M <- mselec(data, lambda)
test <- projinv(data, M, lambda)
# Shrinkage
shrin <- shrink(data,lambda)
plugin <- projinv(data, (10*h), lambda)
postmean <- plugin * shrin
for(i in 1 : length(postmean)){
if(Mod(postmean[i]) > 1){
postmean[i] <- postmean[i]/Mod(postmean[i])
}
}
name = paste(h,'.png',sep='')
png(name, width = 1800, height = 1800)
par(mfrow=c(1,2))
plot.function.circular(function(x) (u0(x, test)), xlim=c(-1, 1), lwd = 5,
main = "Estimate model selection", col = "red", shrink = 2)
ticks.circular(X[1:(10*h)], tcl = 0.05)
curve.circular(u0(x, theta0), add = T, col = "blue", lwd = 5)
plot.function.circular(function(x) (u0(x, postmean)), xlim=c(-1, 1),lwd = 5,
main = "Estimate shrinkage", col = "red", shrink = 2)
ticks.circular(X[1:(10*h)], tcl = 0.05)
curve.circular(u0(x, theta0), add = T,lwd = 5, col = "blue")
dev.off()
}
